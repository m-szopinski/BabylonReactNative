name: Build (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  build:
    name: Build (${{ matrix.platform }})
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        platform: [ios, macos]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Print Xcode version
        run: |
          xcodebuild -version
          xcode-select -p

      - name: Discover Xcode container and scheme (with fallback)
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          WORKSPACES=$( /usr/bin/find . -type d -name '*.xcworkspace' -not -path '*/Pods/*' -not -path '*/node_modules/*' | sort )
          PROJECTS=$(   /usr/bin/find . -type d -name '*.xcodeproj'   -not -path '*/Pods/*' -not -path '*/node_modules/*' | sort )
          CANDIDATES=$(printf "%s\n%s\n" "$WORKSPACES" "$PROJECTS")
          if [[ -z "${CANDIDATES//\n/}" ]]; then
            echo "No .xcworkspace or .xcodeproj found" >&2
            exit 1
          fi
          FOUND_SCHEME=""
          FOUND_FLAG=""
          while IFS= read -r C; do
            [[ -z "$C" ]] && continue
            if [[ "$C" == *.xcworkspace ]]; then
              CONTAINER_FLAG=( -workspace "$C" )
            else
              CONTAINER_FLAG=( -project "$C" )
            fi
            LIST_OUT="$(mktemp)"
            if ! xcodebuild -list "${CONTAINER_FLAG[@]}" >"$LIST_OUT" 2>/dev/null; then
              continue
            fi
            SCHEME="$(awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' "$LIST_OUT" | head -n1 | sed 's/^[[:space:]]*//')"
            if [[ -n "$SCHEME" ]]; then
              FOUND_SCHEME="$SCHEME"
              FOUND_FLAG="${CONTAINER_FLAG[*]}"
              echo "Using container: $C"
              break
            fi
          done <<< "$CANDIDATES"
          if [[ -z "$FOUND_SCHEME" ]]; then
            echo "No shared schemes found in any workspace or project. Ensure at least one scheme is 'Shared' in Xcode (Manage Schemes... -> Shared)." >&2
            exit 1
          fi
          echo "container_flag=$FOUND_FLAG" >> "$GITHUB_OUTPUT"
          echo "scheme=$FOUND_SCHEME" >> "$GITHUB_OUTPUT"

      - name: Build (${{ matrix.platform }})
        shell: bash
        run: |
          set -euo pipefail
          set -x
          if [[ "${{ matrix.platform }}" == "ios" ]]; then
            eval xcodebuild ${{ steps.discover.outputs.container_flag }} \
              -scheme "${{ steps.discover.outputs.scheme }}" \
              -configuration Debug \
              -sdk iphonesimulator \
              build | tee build-${{ matrix.platform }}.log
          else
            eval xcodebuild ${{ steps.discover.outputs.container_flag }} \
              -scheme "${{ steps.discover.outputs.scheme }}" \
              -configuration Debug \
              -destination 'platform=macOS' \
              build | tee build-${{ matrix.platform }}.log
          fi

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.platform }}
          path: |
            build-${{ matrix.platform }}.log
            ~/Library/Logs/DiagnosticReports